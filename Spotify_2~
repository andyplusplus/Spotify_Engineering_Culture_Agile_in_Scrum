    Hi you are back. Great, 
    Now you've probably forgoten all about part one. So lets do a quick recap. 
    Our culture is based on agile principles. All engineering happens in squads. And we try to keep them loosely coupled and tightly aligned. We like cross-pollination, and have an internal open source model for code. Squad do small and frequent releases, which is enabled by decoupling.
    Our self-service model minimize the need for handoffs. And we use "release train" and "feature toggles" to get stuff in production early and often.          And since culture is all about the people, we focused on motivation, community and trust. Rather than structure and control. That was part one.
    And now, I' like to talk about "failure". Our founder, Daniel put it nicely: "We aim to make mistakes faster than anyone else." 
    Yeah, I know, it sounds a bit crazy. But here is the idea. "To build something really cool. we will inevitably make mistakes along the way, right?             But each failure is also learning. So when we do fail, but want it to happen fast, so we can learn fast, and therefore improve fast. 
    It's a strategy for long term success. It's like with kids, you can keep the toddler in the cradle, and she will be safe, but she won't learn much, and won't be very happy. If instead you let she run around and explore the world. 
     She'll fail and fall sometime, but she'll be happier, and develop faster, and the wounds, well, they usually heal. So Spotify is a fail-friendly environment. We are more interested in fast failure recovery, than failure avoidance. 
    Our internal blog has articles like: "celebrate failure", and stories like "how we shot ourselves in the foot".
    Some squads "fail wall", Where people show off their latest failures and
    learnings. Failure without learn is well just failure. So when something
    goes wrong, we usually go up with postportem.  like post If you do not learn to fail, it would just fail So when a mistake we usually follow review Never to be investigated, "who is to blame." 
    Only in respect of the occurrence of errors "What have we learned?" "We changed?" A review in the Incident Management process is a part of us almost Therefore, a single event is not the end of the process indicates there are problems to be solved When we have the experience and lessons learned at the end to avoid the recurrence of the same problem Repair process, rather than just the product Incidentally all the team will conduct a review every few weeks To illustrate what doing well which also improved There is a strong culture in all Spotify: continuous improvement Bottom-up driven, top-down support However, the failure must be non-fatal or not for us fail again alive We therefore advocate this notion "limited blast radius." This architecture is quite decoupled 
    So when the team went wrong It is usually only a small part of the impact of the system, rather than the entire pull down And liability arising from the squad with a point for their thing without switching They usually can quickly fix problems Most of the new features will be released to a small number of users to test And for close observation When these features are confirmed we will gradually stabilize released to users around the world So even in the middle out of the situation Usually only affect a small portion of the functionality and user impact and time is very short This limited range of damage the courage to make the team Do more small trials and accelerate the pace of learning Instead of wasting time prediction and control risks Mario Andretti do this under a good comment "If everything is under control, says you are too cautious." Okay, now let's talk about it in product development Our approach to product development focused on "lean business" principle That is, we often say it's "Thinking, construction, delivery, adjustment" 
    The biggest risk in product development in the wrong product output Before it decided to build a new product or in the main function We will first study Our clients are not really want this feature? Does that help you solve the real problem? Then we'll write a press release or a similar product presentation elevator narrative to convey the benefits of this function For example: "Radio pops go!" Or "songs as you listen to" product characteristics such slogans We will also make a number of assumptions, such as In our core indicators of how this feature will affect the user's habits 
    Whether they will share more music? They will use more often to sign it? To this end we have established a variety of prototype so that we try Let them experience new features while to get their feedback Once we have identified these features or products worth when Constructivism We will begin to build MVP, is "the minimum feasibility product" output plan This plan was just mentioned and consistent description of the product but is not regarded as a fully functional You can also call it a "cute little product." When we add to the capabilities of new learning phase will begin Therefore, we will soon complete output MVP user to release only part of the And use such as A / B testing techniques to measure the effectiveness and test hypotheses At the same time, specific teams will continue to monitor and adjust product release more features Until the desired effect Then we will re-introduce to other users Of course, had to take a moment to address some of the substantive issues on the For example on the issue and how to normalize operations Wait until the product launch time or full-featured We know that it is a successful product Because if not, we would not launch Effectiveness is more important than speed To achieve the desired results only when considered complete product features In this film should be noted that this is the way we try to work But in fact we walked all the way, is not the case Now still in the experimental stage exactly how we plan? How do we know when it will release what products? Ah, to be honest, we did not own a quasi We only know that innovation is the most important thing predictability down in the second 100 percent predictable innovation represents 0% We may somewhere in this range Here Of course, sometimes we need to make a commitment to deliver In partnership with the consolidation or marketing activities This often involves the standard agile planning techniques Speed ​​and burn up like Figure But if we want to make a commitment to have the nature of our delivery usually late submission Until the product characteristics have been confirmed and we will give almost complete commitment Because the team is not the emphasis on planning, some kind of step by step predictability, so you can focus on the entire value delivery Instead of allowing a given plan mercy One product owner said: "I think my team like a bunch of volunteers Gathered here are keen to do their thing. " Therefore, creativity come from? Good new products begin with people Binding inspiration The only play with the attempt, creativity will come true Therefore, we encourage everyone to spend 10% of their time engaged in hacking or hacker Day Week In the meantime we enjoy to experiment or create Like "a song dial" this product Just pick up the phone and call you want to hear that song number This is useful? Unimportant The point is, if you try the idea there will always be more than enough time to dig treasure Often, when hackers have learned to do more than the act itself hacker to be more meaningful In addition, also good fun So we organized the second annual internal hacker week Spotify Several hundred people all week retreat when hackers Our number one slogan is "Let cool things come true." With people the way you want and you want the things you want co-authoring Then published Friday in the large exhibition We are always surprised to find We can come up with a lot of tricks Through this creation in a week Whether made helicopter with lollipop Or in a whole new way to discover music This allows innovation is not so difficult People are born creator So completely let them go and try everything Overall, our culture is to encourage experimentation For example, we use the tool A tool or B? Unclear Let's all try to look at and compare the results Or do we really need to Sprint planning meetings? Unclear Then we skip some meetings to see if really needed Or we put 5 or 10 songs in the singer page ranking? Unclear Let's take a look Both are try and assess the effectiveness of Spotify trials started just hacker week Now it has become our culture So, instead of the bitter fight over there in Better than good to discuss - like what assumptions are What have we learned? What to try next turn It makes our decisions are mostly based on objective data rather than from the personal subjective opinion Or authority designated While we are happy to try, and try to do things in different ways But our culture is very rejection of waste We will soon cease to make any additional value does not matter If effective would continue to do, on the contrary, to stop For example, so far there are things for us to help Like the review conference, the daily stand-ups, Google documents, Git and non-standard guild Something useless to us, such as: regular reporting and handover Independent test team or testing phases and tasks estimate We almost do not do these things We also ineffective meetings As well as some businesses and Mandarin avoided dared touch The most common is known as a large waste of resources projects Basically to many groups that work closely together for several months of the project Large projects mean big risks So we strive to lean, streamlined demand And strive to project broken down into a series of small jobs However, some time is needed for large-scale projects And the potential benefits far superior to risk In those cases, we found that some actual practice is very important Entity or whiteboard with different combinations to visualize processes Perform daily synchronization Meeting All teams are involved in work activities to discuss the relevance of each other Every two weeks or conduct exhibitions Together with the interested parties to assess the integration out of the product and all the details for Because collaborative way gradual improvement, including short and fast feedback loop, so that these practices reduce the risk and waste We also found that a project needs a small but solid leadership-oriented team To look at the general direction of continuous monitoring of the entire project Usually we have a technical manager, a product manager and sometimes there is a design manager, the three co-operation In short, what we are still trying to operate in large-scale projects, after all, we are not very familiar We have been still find a way to straighten out the problem of organizational growth As long as we grow, will also increase the risk of confusion and But if we overcompensation, to increase too much structure and processes We will fall into bureaucratic risk It's even worse So the real key question is what kind of "minimum feasibility bureaucracy"? Allows us to use a minimum of structure and processes To avoid falling into chaos Both are wasted in various forms So to exclude waste culture and quick thinking can help us to maintain a balance The key is to reduce the waste of the direction and content of the ad hoc visualization and often with partners to discuss the project Thus, in addition to the review meeting and review the failure factors outside Many medium-sized team consisting of the squad and the team will use a large visual improvement Kanban Show which events hindered the progress or development and which tasks we are dealing with We also like to discuss how to define one can be called "stick through the" Event For instance, for the squad for the "stick through the" representation Practical solutions to the matter or let easy to keep up with the new members Also includes recurring problem does not occur At the same time we have a definition of "stick through the architecture" of the include During the week I can build, test and deliver my task I learn from the information and make improvement after two weeks on release line Remember, the "stick thoroughly" is a direction, not a location Need not be so specific content But when we agree to the "stick through the" should look like This helps us to focus on improving the working and tracking processes There is a case to improve tracking kanban Toyota called by the routine (Toyota Kata) of lean techniques to get inspired In the upper left corner shows the status of this case, the team has quality problems Left display "stick through the" defined Ideally, we will not have quality problems The upper right corner is the actual target environment That if we are close to the "stick through a" step that would look like? Let the last three, the lower right corner shows the specific actions taken to target situations When this is done, the team will fill new action or task In a dynamic team like this and live studio wall Kanban Usually used in the review conference next track Well, I know that this movie might make everything look very beautiful Spotify But, in fact there are many issues we need to deal with I can even open-drain leakage long list But I will not, because the problem on this list will soon be resolved Our fast-growing, fast-changing Today looks smart way may cause a tough issue tomorrow Just because we grew up, then everything is different However, most of the problems are short-lived because we will indeed go to solve the problem This company specializes transformation like architecture, processes, organization Or anything that must be used to solve the problem And that is the key Sound fixes a problem with the flow of culture Because culture is so important so we spent a lot of effort to strengthen it This movie is just a small example No one can really grasp certain cultural But we still attach great importance to members Internal teams such as personnel operating systems and more than 30 in the squad dispersed agile coach Scattered in all squad At the same time we will perform freshman training Provisional squad recruited by the new members and let them to solve practical problems But also to learn our processes and team functioning test data Above are talking about must be completed within a week This intensive training with live ammunition allows you to really go into the culture Most of the people will make the new program in a very powerful on-line within a week Re-emphasize that it does not matter as long as we fail to learn the lessons from the The main culture still have to pass through the story Whether in blogs, hindsight shows a meeting or lunch As long as we continue to share the success and failure of each other lessons learned I think we can keep this good culture By all accounts The sum of the attitudes and actions of organizational culture is actually a member of the So you are the culture you want to shape behavior In this way, finished I hope you like this story Thanks for watching Caption Version
